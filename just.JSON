{"m1":"Zm9yIGkgaW4gcmFuZ2UgKDIsKGxlbihkYXRhKSArIDEpKTogZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKGRhdGFbJ217fScuZm9ybWF0KGkpXSkuZGVjb2RlKCd1dGYtOCcpKQo=","m2":"aW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBzaGxleAppbXBvcnQgb3MucGF0aApmcm9tIGNyeXB0b2dyYXBoeS5mZXJuZXQgaW1wb3J0IEZlcm5ldAppbXBvcnQganNvbgppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IHJhbmRvbQoKZGVmIGVuY3J5cHRfbWVzc2FnZShtZXNzYWdlLCBrZXkpOgogICAgRiA9IEZlcm5ldChrZXkpCiAgICBlbmNyeXB0ZWRfbWVzc2FnZSA9IEYuZW5jcnlwdChtZXNzYWdlKQogICAgcmV0dXJuIGVuY3J5cHRlZF9tZXNzYWdlCgoKZGVmIGRlY3J5cHRfbWVzc2FnZShlbmNyeXB0ZWRfbWVzc2FnZSwga2V5KToKICAgIEYgPSBGZXJuZXQoa2V5KQogICAgZGVjcnlwdGVkX21lc3NhZ2UgPSBGLmRlY3J5cHQoZW5jcnlwdGVkX21lc3NhZ2UpLmRlY29kZSgpCiAgICByZXR1cm4gZGVjcnlwdGVkX21lc3NhZ2UKCgpjbGFzcyBBZ2VudDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBsaXN0ZW5lcl9pcCwgbGlzdGVuZXJfcG9ydCwgYWdlbnRfbmFtZSwgYWdlbnRfa2V5KToKICAgICAgICBzZWxmLm91dHB1dCA9IE5vbmUKICAgICAgICBzZWxmLmxpc3RlbmVyX2lwID0gbGlzdGVuZXJfaXAKICAgICAgICBzZWxmLmxpc3RlbmVyX3BvcnQgPSBsaXN0ZW5lcl9wb3J0CiAgICAgICAgc2VsZi5hZ2VudF9uYW1lID0gYWdlbnRfbmFtZQogICAgICAgIHNlbGYua2V5ID0gYWdlbnRfa2V5CiAgICAgICAgc2VsZi5maWxlX25hbWUgPSBOb25lCiAgICAgICAgc2VsZi5zeXN0ZW0gPSBOb25lCiAgICAgICAgIyBSZWFkIGFnZW50IG5hbWUgZnJvbSBmaWxlIGlmIGl0IGV4aXN0cwoKICAgIGRlZiByZWdpc3RlcihzZWxmKToKICAgICAgICBob3N0ID0gImhvc3RuYW1lY3RsIgogICAgICAgIGhvc3RuYW1lID0gb3MucG9wZW4oaG9zdCkucmVhZCgpCiAgICAgICAgc2VsZi5zeXN0ZW0gPSBwbGF0Zm9ybS51bmFtZSgpLnN5c3RlbQoKICAgICAgICAjIFJldHJpZXZlIHRoZSBvdXRwdXQgb2YgdGhlIGNvbW1hbmQKICAgICAgICBtYWMgPSBvcy5wb3BlbigiaXAgYSB8IGdyZXAgZXRoZXIgfCBhd2sgJ3twcmludCAkMn0nIikucmVhZCgpCiAgICAgICAgbWFjID0gbWFjCiAgICAgICAgZ2VvX2luZm8gPSBvcy5wb3BlbigiY3VybCBodHRwczovL2lwaW5mby5pby8iKS5yZWFkKCkKICAgICAgICBtYWluX2RhdGEgPSBzdHIoeyJob3N0bmFtZSI6IGhvc3RuYW1lLCAibWFjIjogbWFjLCAiZ2VvX2luZm8iOiBnZW9faW5mb30pCiAgICAgICAgcGF5bG9hZCA9IHsKICAgICAgICAgICAgImhvc3RuYW1lIjogaG9zdG5hbWUsCiAgICAgICAgICAgICJtYWMiOiBtYWMsCiAgICAgICAgICAgICJnZW9faW5mbyI6IGdlb19pbmZvCiAgICAgICAgfQoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgIGYiaHR0cDovL3tzZWxmLmxpc3RlbmVyX2lwfTp7c2VsZi5saXN0ZW5lcl9wb3J0fS9yZWcve3NlbGYuYWdlbnRfbmFtZX0iLAogICAgICAgICAgICBkYXRhPXBheWxvYWQKICAgICAgICApCgogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgZGF0YSA9IHJlc3BvbnNlLnRleHQKICAgICAgICAgICAgZGF0YV9kaWN0ID0ganNvbi5sb2FkcyhkYXRhKSAgIyBQYXJzZSBKU09OIHN0cmluZyB0byBkaWN0aW9uYXJ5CiAgICAgICAgICAgIHNlbGYuYWdlbnRfbmFtZSA9IGRhdGFfZGljdFsibmFtZSJdCiAgICAgICAgICAgIHNlbGYua2V5ID0gZGF0YV9kaWN0WyJrZXkiXQogICAgICAgICAgICAjIFNhdmUgYWdlbnQgbmFtZSB0byBhIGZpbGUKICAgICAgICAgICAgd2l0aCBvcGVuKCJhZ2VudF9jcmVkLnR4dCIsICJ3IikgYXMgZjoKICAgICAgICAgICAgICAgIGFnZW50X2NyZWQgPSB7c2VsZi5hZ2VudF9uYW1lOiBzZWxmLmtleX0KICAgICAgICAgICAgICAgIGpzb24uZHVtcChhZ2VudF9jcmVkLCBmKQogICAgICAgICAgICBwcmludChmIkFnZW50IHtzZWxmLmFnZW50X25hbWV9IHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5IHdpdGggTGlzdGVuZXIuIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgiUmVnaXN0cmF0aW9uIGZhaWxlZC4iKQogICAgICAgIHJldHVybiBzZWxmLnN5c3RlbQogICAgIyBkZWYgdGFza193aW5kb3dzKHNlbGYpOgoKICAgIGRlZiB0YXNrX2xpbnV4KHNlbGYpOgogICAgICAgICMgR2V0IHRhc2tzIGZyb20gdGhlIGxpc3RlbmVyCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgIGYiaHR0cDovL3tzZWxmLmxpc3RlbmVyX2lwfTp7c2VsZi5saXN0ZW5lcl9wb3J0fS90YXNrcy97c2VsZi5hZ2VudF9uYW1lfSIKICAgICAgICApCgogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgdGFza19leGVjID0gZGVjcnlwdF9tZXNzYWdlKGVuY3J5cHRlZF9tZXNzYWdlPXJlc3BvbnNlLnRleHQsIGtleT1zZWxmLmtleSkKICAgICAgICAgICAgaWYgdGFza19leGVjOgogICAgICAgICAgICAgICAgcHJpbnQodGFza19leGVjKQogICAgICAgICAgICAgICAgZmlsZV9tZXRhID0gdGFza19leGVjLmxzdHJpcCgpCiAgICAgICAgICAgICAgICBjb21tYW5kLCBfLCBmaWxlID0gZmlsZV9tZXRhLnBhcnRpdGlvbigiICIpCgogICAgICAgICAgICAgICAgIyBGaWxlIHNlbmQgdG8gc2VydmVyCiAgICAgICAgICAgICAgICBpZiBjb21tYW5kID09ICJnZXRfZmlsZSI6CiAgICAgICAgICAgICAgICAgICAgdXJsID0gZiJodHRwOi8ve3NlbGYubGlzdGVuZXJfaXB9OntzZWxmLmxpc3RlbmVyX3BvcnR9L3NlbmRfZmlsZS97c2VsZi5hZ2VudF9uYW1lfSIKICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhmaWxlKToKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGUsICdyYicpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGYucmVhZCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsnRmlsZW5hbWUnOiBmaWxlLCAnZmlsZV9jb250ZW50JzogY29udGVudC5kZWNvZGUoKX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0ganNvbi5kdW1wcyhkYXRhLCBlbnN1cmVfYXNjaWk9RmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEuZW5jb2RlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhMiA9IGVuY3J5cHRfbWVzc2FnZShkYXRhLCBzZWxmLmtleSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCwgZmlsZXM9eydmaWxlJzogbWV0YTJ9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJGaWxlIHtmaWxlfSBzZW50IHN1Y2Nlc3NmdWxseS4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSB7InJlc3VsdCI6IGVuY3J5cHRfbWVzc2FnZShmIkZhaWxlZCB0byBzZW5kIGZpbGUge2ZpbGV9LiIuZW5jb2RlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmtleSkuZGVjb2RlKCl9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCwgZGF0YT1wYXlsb2FkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJGYWlsZWQgdG8gc2VuZCBmaWxlIHtmaWxlfS4iKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkID0geyJyZXN1bHQiOiBlbmNyeXB0X21lc3NhZ2UoZiJFcnJvciBzZW5kaW5nIGZpbGUge2ZpbGV9OiB7c3RyKGUpfSIuZW5jb2RlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5rZXkpLmRlY29kZSgpfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCwgZGF0YT1wYXlsb2FkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IHsicmVzdWx0IjogZW5jcnlwdF9tZXNzYWdlKGYiRmlsZSB7ZmlsZX0gbm90IGZvdW5kLiIuZW5jb2RlKCksIHNlbGYua2V5KS5kZWNvZGUoKX0KICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLCBkYXRhPXBheWxvYWQKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICMgRmlsZSBkb3dubG9hZCBmcm9tIHNlcnZlcgogICAgICAgICAgICAgICAgIyBGaWxlIGRvd25sb2FkIGZyb20gc2VydmVyCiAgICAgICAgICAgICAgICBlbGlmIGNvbW1hbmQgPT0gImZpbGVfaW5zdGFsbCI6CiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYiaHR0cDovL3tzZWxmLmxpc3RlbmVyX2lwfTp7c2VsZi5saXN0ZW5lcl9wb3J0fS9kb3dubG9hZC97c2VsZi5hZ2VudF9uYW1lfS97ZmlsZX0iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkX2NvbnRlbnQgPSByZXNwb25zZS5jb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICMgRGVjcnlwdCB0aGUgY29udGVudAogICAgICAgICAgICAgICAgICAgICAgICBkZWNyeXB0ZWRfY29udGVudCA9IGRlY3J5cHRfbWVzc2FnZShlbmNyeXB0ZWRfY29udGVudCwgc2VsZi5rZXkpCiAgICAgICAgICAgICAgICAgICAgICAgICMgU2F2ZSB0aGUgZmlsZSB0byAvdG1wIGRpcmVjdG9yeQogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oJy90bXAnLCBmaWxlKQogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAnd2InKSBhcyBmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSA9IGRlY3J5cHRlZF9jb250ZW50LmVuY29kZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLndyaXRlKGZpbGUpCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiRmlsZSAne2ZpbGV9JyBkb3dubG9hZGVkIHN1Y2Nlc3NmdWxseSB0byAvdG1wIGRpcmVjdG9yeS4iKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiRmFpbGVkIHRvIGRvd25sb2FkIGZpbGUgJ3tmaWxlfScgZnJvbSBzZXJ2ZXIuIikKCgogICAgICAgICAgICAgICAgIyBDb21tYW5kIGV4ZWN1dGUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAjIEV4ZWN1dGUgdGhlIHRhc2sKICAgICAgICAgICAgICAgICAgICAgICAgaG9zdG5hbWVfcHJvY2VzcyA9IHN1YnByb2Nlc3MuUG9wZW4oc2hsZXguc3BsaXQodGFza19leGVjKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dD1UcnVlKQoKICAgICAgICAgICAgICAgICAgICAgICAgIyBSZXRyaWV2ZSB0aGUgb3V0cHV0IG9mIHRoZSBjb21tYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCwgXyA9IGhvc3RuYW1lX3Byb2Nlc3MuY29tbXVuaWNhdGUoKQoKICAgICAgICAgICAgICAgICAgICAgICAgIyBFeHRyYWN0IHRoZSBob3N0bmFtZSBmcm9tIHRoZSBvdXRwdXQKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQob3V0cHV0KQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm91dHB1dCA9IG91dHB1dC5lbmNvZGUoKQoKICAgICAgICAgICAgICAgICAgICAgICAgIyBTZW5kIHJlc3VsdHMgYmFjayB0byB0aGUgbGlzdGVuZXIKCiAgICAgICAgICAgICAgICAgICAgICAgIGVuY3J5cHRlZF9vdXRwdXQgPSBlbmNyeXB0X21lc3NhZ2Uoc2VsZi5vdXRwdXQsIHNlbGYua2V5KQogICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkID0geyJyZXN1bHQiOiBlbmNyeXB0ZWRfb3V0cHV0LmRlY29kZSgpfQogICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmImh0dHA6Ly97c2VsZi5saXN0ZW5lcl9pcH06e3NlbGYubGlzdGVuZXJfcG9ydH0vcmVzdWx0cy97c2VsZi5hZ2VudF9uYW1lfSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXBheWxvYWQKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlRhc2sgZXhlY3V0ZWQgYW5kIHJlc3VsdHMgc2VudCBzdWNjZXNzZnVsbHkuIikKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHJlc3BvbnNlLnN0YXR1c19jb2RlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkZhaWxlZCB0byBzZW5kIHJlc3VsdHMgdG8gdGhlIGxpc3RlbmVyLiIpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiWW91ciBlcnJvciBtZXNzYWdlIC0tPiIsIHN0cihlKSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vdXRwdXQgPSAiVGhlcmUgaXMgYSBwcm9ibGVtIgogICAgICAgICAgICAgICAgICAgICAgICAjIElmIHRoZSB0YXNrIGV4ZWN1dGlvbiBmYWlscwogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBzZWxmLm91dHB1dAogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRfYnl0ZXMgPSBzZWxmLm91dHB1dC5lbmNvZGUoKQogICAgICAgICAgICAgICAgICAgICAgICAjIEVuY3J5cHQgdGhlIG91dHB1dAogICAgICAgICAgICAgICAgICAgICAgICBlbmNyeXB0ZWRfb3V0cHV0ID0gZW5jcnlwdF9tZXNzYWdlKG91dHB1dF9ieXRlcywgc2VsZi5rZXkpCiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSB7InJlc3VsdCI6IGVuY3J5cHRlZF9vdXRwdXQuZGVjb2RlKCl9CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYiaHR0cDovL3tzZWxmLmxpc3RlbmVyX2lwfTp7c2VsZi5saXN0ZW5lcl9wb3J0fS9yZXN1bHRzL3tzZWxmLmFnZW50X25hbWV9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE9cGF5bG9hZAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiRmFpbGVkIHRvIGV4ZWN1dGUgdGFzazoge291dHB1dH0iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoIk5vIHRhc2tzIGF2YWlsYWJsZS4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJGYWlsZWQgdG8gZmV0Y2ggdGFza3MgZnJvbSB0aGUgbGlzdGVuZXIuIikKICAgICAgICB5ID0gcmFuZG9tLnJhbmRyYW5nZSg3KQogICAgICAgIHRpbWUuc2xlZXAoeSkKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIyBSZXBsYWNlIHdpdGggdGhlIGFjdHVhbCBJUCBhZGRyZXNzIGFuZCBwb3J0IG9mIHRoZSBsaXN0ZW5lcgogICAgTElTVEVORVJfSVAgPSAiMTkyLjE2OC4xMDAuNDEiCiAgICBMSVNURU5FUl9QT1JUID0gNTAwMAogICAgaWYgb3MucGF0aC5leGlzdHMoImFnZW50X2NyZWQudHh0Iik6CiAgICAgICAgd2l0aCBvcGVuKCJhZ2VudF9jcmVkLnR4dCIsICJyIikgYXMgZjoKICAgICAgICAgICAgYWdlbnRfZGF0YSA9IGpzb24ubG9hZChmKQogICAgICAgICAgICBhZ2VudF9uYW1lID0gbGlzdChhZ2VudF9kYXRhLmtleXMoKSlbMF0KICAgICAgICAgICAgYWdlbnRfa2V5ID0gYWdlbnRfZGF0YVthZ2VudF9uYW1lXQogICAgICAgIHByaW50KGYiQWdlbnQge2FnZW50X25hbWV9IHJldHJpZXZlZCBmcm9tIGZpbGUuIikKICAgICAgICBhZ2VudCA9IEFnZW50KExJU1RFTkVSX0lQLCBMSVNURU5FUl9QT1JULCBhZ2VudF9uYW1lPWFnZW50X25hbWUsIGFnZW50X2tleT1hZ2VudF9rZXkpCiAgICBlbHNlOgogICAgICAgIGFnZW50ID0gQWdlbnQoTElTVEVORVJfSVAsIExJU1RFTkVSX1BPUlQsIGFnZW50X25hbWU9Tm9uZSwgYWdlbnRfa2V5PU5vbmUpCiAgICBzeXN0ZW0gPSBhZ2VudC5yZWdpc3RlcigpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlmIHN5c3RlbSA9PSAiTGludXgiOgogICAgICAgICAgICBhZ2VudC50YXNrX2xpbnV4KCkK"}
